public class MyClass {
    final int n=4;
    void printdorad(int board[][])
    {
        for(i=0;i<n;i++){
            for (j=0;j<n;j++){
                System.out.println(board[i][j]);
            }
            System.out.println();
        }
    }
    
    boolean issafe(int board[][],int row,int col){
        int i,j;
        for(col=0;col<n;col++){
            if(board[row][col]==1)
                return false;
            
        }
        for(i=row,j=col;i>=0 && j>=0;i--,j--){
            if(board[i][j]==1)
                return false;
                
        }
        for(i=row,j=col;i<n && j>=0;i++,j--){
            if(board[i][j]==1)
                return false;
                
        }
        return true;
    }
    boolean solveNQUtil(int board[][], int col)
    {   
       if(col >=n) return false;
       for(int i=col;i<n;i++){
           if (issafe(board,i,col)){
               board[i][col]=1;
               if(solveNQUtil(board,i+1,col)){
                   return true;
               }
               board[i][col]=0;
           }
       }
       return false;
  
        /* If the queen can not be placed in any row in
           this colum col, then return false */
      
    }
  
   boolean solveNQ()
    {
        int board[][] = { { 0, 0, 0, 0 },
                          { 0, 0, 0, 0 },
                          { 0, 0, 0, 0 },
                          { 0, 0, 0, 0 } };
  
        if (solveNQUtil(board, 0) == false) {
            System.out.print("Solution does not exist");
            return false;
        }
  
        printSolution(board);
        return true;
    }
  
    // driver program to test above function
    public static void main(String args[]){
    Myclass Queen = new Myclass();
        Queen.solveNQ();
    }
}
